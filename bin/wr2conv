#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var minimist = require('minimist');
var wr2conv = require('../');
var chalk = require('chalk');

var argv;

function convFile(file) {
	var src= fs.readFileSync(file);
	var result = wr2conv(src.toString(),file);
	var output_file;

	if(argv.output) {
		var filename = path.basename(file);
		if(!fs.existsSync(argv.output)){
			fs.mkdirSync(argv.output);
		}
		output_file = path.resolve(argv.output, filename);
	}else{
		output_file = file;
	}
	try{
		if(argv.dry) {
			process.stdout.write(chalk.red("Dry:"));
			process.stdout.write('File ' + chalk.cyan(file) + ' saved.\n');
		}else{
			if(argv.stdout){
				process.stdout.write(result);
			}else{
				fs.writeFileSync(output_file, result);
				process.stdout.write('File ' + chalk.cyan(file) + ' saved.\n');
			}
		}
	} catch(e){
		process.stdout.write(chalk.red("Save file ") + chalk.cyan(value) + chalk.red(' is faild.') + "\n");
		return;
	}
	if(argv['check-resource']){
		wr2conv.pushResource();
	}
}

function help(){
	fs.createReadStream(__dirname + '/help.txt').pipe(process.stdout);
}

function main(arg, callback){
	argv = minimist(process.argv.slice(2), {
		string: ['output','ext','basedir'],
		boolean: [
			'help',
			'version',
			'dry',
			'stdout',
			'check-resource'
		],
		alias: {
			h: 'help',
			o: 'output',
			v: 'version',
			d: 'dry',
			c: 'check-resource',
			e: 'ext',
			s: 'stdout',
			b: 'basedir'
		},
		default: {
			help            : false,
			vertion         : false,
			quiet           : false,
			dry             : false,
			stdout          : false,
			'check-resource': false
		}
	});

	if(argv.help) {
		help();
		return;
	}

	if(argv.version){
		process.stdout.write('v' + wr2conv.version + '\n');
		return;
	}

	if(argv.basedir){
		wr2conv.setOptions({basedir: path.resolve(argv.basedir)});
	}

	var files = argv._.slice();

	if(!files.length){
		process.stdout.write(chalk.red('Source file is empty.\n'));
		return;
	}

	wr2conv.clearResourceInfo();
	var result = getFileList(files);
	result.forEach(function(file,index,array){
		convFile(file);
	});

	if(argv['check-resource']){
		var report = wr2conv.getResourceReport();
		var report_file;
		if(argv.output){
			report_file = path.relative('./',path.resolve(argv.output, "./report.txt"));
		}else{
			report_file = "./report.txt";
		}
		fs.writeFileSync(report_file, report);
		process.stdout.write(
				"Generate report file : " +
				chalk.cyan(report_file +"\n"));
	}

	if(callback){
		callback();
	}
}

function getFileList(files){
	var list = [];
	files.forEach(function(value,index,array){
		var stats;
		try{
			stats = fs.statSync(value);
		} catch(e){
			process.stdout.write(chalk.red('Source file ') + chalk.cyan(value) + chalk.red(' is not found.') + "\n");
			return false;
		}

		if(stats.isDirectory()) {
			var sub_files = fs.readdirSync(value);
			var result = getFileList(sub_files);
			if(result.length){
				Array.prototype.push.apply(list,result);
			}
		}else{
			if(argv.ext){
				if(path.extname(value).replace('.','') == argv.ext){
					list.push(value);
				}
			}else{
				list.push(value);
			}
		}
	});
	return list;
}

if (!module.parent) {
	process.title = 'wr2conv';
	main(process.argv.slice(), function(err, code) {
		if (err) throw err;
		return process.exit(code || 0);
	});
} else {
	module.exports = main;
}
